import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	listen_dev,
	noop,
	null_to_empty,
	run_all,
	safe_not_equal,
	space,
	text,
	validate_slots
} from "../web_modules/svelte/internal.js";

import "./components/globals/Theme.js";
import Bar from './components/Bar.js';
import Base from './components/Base.js';
import { faThumbsUp } from '../web_modules/@fortawesome/free-regular-svg-icons.js';
import { faRedoAlt, faUndoAlt } from '../web_modules/@fortawesome/free-solid-svg-icons.js';

// import Icon from 'svelte-awesome';
// import Icon from 'svelte-awesome/components/Icon.svelte'
// https://fontawesome.com/icons?d=gallery&q=video&s=regular,solid&m=free
import { refresh, comment, codeFork, camera, ban } from '../web_modules/svelte-awesome/icons.js';

import {
	fastForward,
	fastBackward,
	circle,
	play,
	pause,
	stop,
	eject
} from '../web_modules/svelte-awesome/icons.js';

const file = "src/App.svelte";

// (112:6) {:else}
function create_else_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Pause");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(112:6) {:else}",
		ctx
	});

	return block;
}

// (110:6) {#if !isRecording}
function create_if_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Record");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(110:6) {#if !isRecording}",
		ctx
	});

	return block;
}

// (130:6) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Stop");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(130:6) {:else}",
		ctx
	});

	return block;
}

// (128:6) {#if !isRecording}
function create_if_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Play");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(128:6) {#if !isRecording}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let button0;
	let t1;
	let span;
	let span_class_value;
	let button0_class_value;
	let t2;
	let button1;
	let button1_class_value;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (!/*isRecording*/ ctx[1]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (!/*isRecording*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_1(ctx, -1);
	let if_block1 = current_block_type_1(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			button0 = element("button");
			if_block0.c();
			t1 = space();
			span = element("span");
			t2 = space();
			button1 = element("button");
			if_block1.c();
			attr_dev(div0, "class", "app svelte-xh0kwa");
			add_location(div0, file, 96, 2, 1746);

			attr_dev(span, "class", span_class_value = "" + (null_to_empty(/*isRecording*/ ctx[1]
			? 'pulsate-fwd text-red-900'
			: 'text-orange-900') + " svelte-xh0kwa"));

			add_location(span, file, 115, 6, 2315);

			attr_dev(button0, "class", button0_class_value = "button " + (/*current*/ ctx[0] == 'RecordBtn'
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 hover:border-red-400 border-b-4') + " w-32 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa");

			add_location(button0, file, 101, 4, 1838);

			attr_dev(button1, "class", button1_class_value = "button " + (/*current*/ ctx[0] == 'PlayBtn' && /*toggleEffect*/ ctx[2]
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 border-b-4') + " w-32 hover:bg-red-600 text-white font-bold py-2 px-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa");

			add_location(button1, file, 121, 4, 2466);
			attr_dev(div1, "class", "bar svelte-xh0kwa");
			add_location(div1, file, 100, 2, 1816);
			attr_dev(div2, "class", "wrapper svelte-xh0kwa");
			add_location(div2, file, 95, 0, 1722);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, button0);
			if_block0.m(button0, null);
			append_dev(button0, t1);
			append_dev(button0, span);
			append_dev(div1, t2);
			append_dev(div1, button1);
			if_block1.m(button1, null);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler*/ ctx[3], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(button0, t1);
				}
			}

			if (dirty & /*isRecording*/ 2 && span_class_value !== (span_class_value = "" + (null_to_empty(/*isRecording*/ ctx[1]
			? 'pulsate-fwd text-red-900'
			: 'text-orange-900') + " svelte-xh0kwa"))) {
				attr_dev(span, "class", span_class_value);
			}

			if (dirty & /*current*/ 1 && button0_class_value !== (button0_class_value = "button " + (/*current*/ ctx[0] == 'RecordBtn'
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 hover:border-red-400 border-b-4') + " w-32 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa")) {
				attr_dev(button0, "class", button0_class_value);
			}

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx, dirty))) {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(button1, null);
				}
			}

			if (dirty & /*current*/ 1 && button1_class_value !== (button1_class_value = "button " + (/*current*/ ctx[0] == 'PlayBtn' && /*toggleEffect*/ ctx[2]
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 border-b-4') + " w-32 hover:bg-red-600 text-white font-bold py-2 px-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa")) {
				attr_dev(button1, "class", button1_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if_block0.d();
			if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	let current = '';
	let isRecording = false;
	let toggleEffect = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(1, isRecording = !isRecording);
		$$invalidate(0, current = current == 'RecordBtn' ? '' : 'RecordBtn');
	};

	const click_handler_1 = () => $$invalidate(0, current = current == 'PlayBtn' ? '' : 'PlayBtn');

	$$self.$capture_state = () => ({
		Bar,
		Base,
		faThumbsUp,
		faRedoAlt,
		faUndoAlt,
		refresh,
		comment,
		codeFork,
		camera,
		ban,
		fastForward,
		fastBackward,
		circle,
		play,
		pause,
		stop,
		eject,
		current,
		isRecording,
		toggleEffect
	});

	$$self.$inject_state = $$props => {
		if ('current' in $$props) $$invalidate(0, current = $$props.current);
		if ('isRecording' in $$props) $$invalidate(1, isRecording = $$props.isRecording);
		if ('toggleEffect' in $$props) $$invalidate(2, toggleEffect = $$props.toggleEffect);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [current, isRecording, toggleEffect, click_handler, click_handler_1];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

export default App;